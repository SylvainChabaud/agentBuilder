// src/app/api/mainAgent/workflow/runWorkflowPlan.js
import { callAgentForTask } from './callAgentForTask';
import { buildFinalUserPrompt, updateWorkflowState } from './utils';

/**
 * Ex√©cute chaque t√¢che du plan en respectant les d√©pendances et en injectant les outputs pr√©c√©dents
 * @param {string} userId
 * @param {string} workflowId
 * @param {WorkflowState} state
 * @returns {Promise<WorkflowState>} √âtat mis √† jour
 */
export async function runWorkflowPlan(userId, workflowId, state) {
  const { plan, agents } = state;
  const memory = state.memory.content;

  const tokenUsages = [];

  for (let i = 0; i < plan.length; i++) {
    const step = plan[i];
    const taskId = `task-${i + 1}`;
    const { task, assignedAgentId, dependencies } = step;
    const agent = agents.find((a) => a.id === assignedAgentId);

    // üß† R√©cup√®re les outputs des t√¢ches dont d√©pend celle-ci
    const dependencyOutputs = dependencies.map((depName) => {
      const depIndex = state.tasks.findIndex((t) => t.name === depName);
      return memory.byTask[`task-${depIndex + 1}`] || null;
    });

    // üß© Ex√©cute l‚Äôagent IA avec sa t√¢che et les r√©sultats dont il d√©pend
    const { result, tokenUsage } = await callAgentForTask(
      userId,
      agent,
      task,
      dependencyOutputs
    );

    tokenUsages.push(tokenUsage);

    console.info('runWorkflowPlan result', result);

    // üíæ M√©morise l‚Äôoutput
    memory.byTask[taskId] = result;
    memory.byAgent[agent.id] = memory.byAgent[agent.id] || [];
    memory.byAgent[agent.id].push({ task, output: result });

    // üßæ Log dans l‚Äôhistorique
    state.logs.push({
      type: 'info',
      message: `‚úÖ T√¢che "${task.name}" ex√©cut√©e par ${agent.name}`,
    });

    // Mise √† jour interm√©diaire de l‚Äô√©tat du workflow
    await updateWorkflowState(userId, workflowId, state);
  }

  state.status = 'completed';
  return { state, tokenUsages };
}
