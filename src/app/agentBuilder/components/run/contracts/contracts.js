import { generatePrompt } from '../getPrompts';

export const getIaContext = ({ context, inputs, outputs }) => {
  console.info('getIaContext', { context, inputs, outputs });

  return context
    ? [
        {
          role: 'system',
          content: `${context[0]?.content}
Voici les r√®gles de comportement globales :
1) R√©ponds avec pr√©cision et concision.
2) Sois clair dans ta mise en forme.
3) Ne sors pas de ton r√¥le d‚Äôassistant sp√©cialis√©.
4) Tu parles en Fran√ßais.
5) Tu respectes scrupuleusement le format demand√©.
6) Tu ne devines aucune information si elle n‚Äôest pas donn√©e.`,
          timestamp: new Date(),
        },
        // ...context,
        {
          role: 'user',
          content: generatePrompt({ inputs, outputs }),
          timestamp: new Date(),
        },
        {
          role: 'assistant',
          content:
            'Bien s√ªr‚ÄØ! J‚Äôai bien compris vos instructions et je suis pr√™t √† vous aider.',
          timestamp: new Date(),
        },
      ]
    : [];
};

/**
 * Parse un texte pour en extraire les paires "cl√©: valeur"
 * - Conserve les accents et apostrophes dans les cl√©s/valeurs
 * - Ignore les caract√®res de contr√¥le, mais garde la ponctuation g√©n√©rale
 * - D√©tecte "cl√© : valeur" jusqu‚Äô√† un saut de ligne, une virgule ou la fin du texte
 *
 * @param {string} input - Le texte d'entr√©e potentiellement bruit√©
 * @returns {Object} - Un objet contenant les paires cl√©/valeur
 */
export function advancedTextParser(input) {
  console.info('advancedTextParser', input);
  // 1. Nettoyer uniquement les caract√®res de contr√¥le
  //    (ASCII < 32, sauf \n si vous le souhaitez, et quelques autres)
  //    On conserve les lettres accentu√©es, les chiffres, la ponctuation, etc.
  const sanitized = input.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');

  console.info('sanitized', sanitized);

  const pattern = /([\p{L}\p{M}\p{Nd}\p{Pc}'"\-]+)\s*:\s*([^,\n]+)/giu;

  const result = {};
  let match;

  // 3. Boucle sur tous les couples trouv√©s
  while ((match = pattern.exec(sanitized)) !== null) {
    const rawKey = match[1].trim();
    const rawValue = match[2].trim();

    // -- Si vous souhaitez tout mettre en minuscules sur la cl√© :
    //    const key = rawKey.toLowerCase();
    // -- Sinon, vous pouvez garder la casse telle quelle
    const key = rawKey;

    // -- Nettoyer encore la valeur si besoin
    //    (enlever trailing punctuation, etc.)
    const value = rawValue
      .trim()
      // Retirer les backslash devant les guillemets
      .replace(/\\+"/g, '"')
      .replace(/\\+'/g, "'")
      // Ensuite supprimer les guillemets en d√©but/fin (un ou plusieurs)
      .replace(/^["']+/, '')
      .replace(/["']+$/, '')
      // Supprime les espaces en fin de cha√Æne
      .replace(/\s+$/, '')
      // Supprime tous les doubles ast√©risques (et √©ventuels espaces autour)
      .replace(/\*\*/g, '')
      .trim();

    result[key] = value;
  }

  console.info('result', result);

  return result;
}

export const getIaPrompt = ({ data, inputs, hasConvertToString = true }) => {
  console.info('getIaPrompt', { inputs, data });

  let parsedData = {};

  // üîπ Cas 0 : Si `inputs` est vide, on extrait seulement les cl√©s de `data`: SHEETS !
  if (
    inputs === null ||
    (typeof inputs === 'object' &&
      typeof data === 'object' &&
      Object.entries(inputs).length === 0)
  ) {
    console.log("L'objet inputs est vide."); // PAS DE CONTRAT POUR CETTE EXPERTISE
    parsedData = data;
  } else {
    // üîπ Cas 1 : Si `data` est un objet, on extrait seulement les cl√©s de `inputs`
    if (typeof data === 'object' && data !== null) {
      parsedData = Object.keys(inputs).reduce((acc, key) => {
        const lowercaseKey = key.toLowerCase();
        // Utiliser la cl√© en minuscules dans inputs pour v√©rifier si elle existe dans data
        const matchingKey = Object.keys(data).find(
          (dataKey) => dataKey.toLowerCase() === lowercaseKey
        );

        // Si la cl√© correspond, on prend la valeur correspondante de data, sinon ''
        acc[lowercaseKey] = matchingKey ? data[matchingKey] : '';
        return acc;
      }, {});
    }

    // üîπ Cas 2 : Si `data` est une string, on construit un objet avec les cl√©s de `inputs`
    if (typeof data === 'string') {
      // parsedData = data;
      parsedData = advancedTextParser(data);

      // üîπ Assurer que toutes les cl√©s de `inputs` existent dans `parsedData`
      parsedData = Object.keys(inputs).reduce((acc, key) => {
        const lowercaseKey = key.toLowerCase();
        acc[lowercaseKey] = parsedData[lowercaseKey] || ''; // Ajoute la cl√© si absente
        return acc;
      }, {});
    }

    console.info('parsedData', parsedData);

    // üîπ V√©rifier si `inputs` est valide
    if (typeof inputs !== 'object' || inputs === null) {
      console.error('getIaPrompt: inputs doit √™tre un objet valide');
      return '';
    }
  }

  // üîπ Choix du format de sortie
  // const result = hasConvertToString
  //   ? Object.entries(parsedData)
  //       .map(([key, value]) => `${key}: '${value}'`)
  //       .join(', ')
  //   : parsedData;

  const result = Object.entries(parsedData)
    .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)
    .join(', ');

  console.info('Formatted Data:', result);
  return result;
};
